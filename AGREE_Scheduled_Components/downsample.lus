type Base_Types__Boolean = bool;
type Base_Types__Unsigned = int;
type Base_Types__Unsigned_64 = int;
type Base_Types__Unsigned_32 = int;
type Base_Types__Unsigned_16 = int;
type Base_Types__Unsigned_8 = int;
type Base_Types__Integer = int;
type Base_Types__Integer_64 = int;
type Base_Types__Integer_32 = int;
type Base_Types__Integer_16 = int;
type Base_Types__Integer_8 = int;
type Base_Types__Float = real;
type Base_Types__Float_32 = real;
type Base_Types__Float_64 = real;

node _TOP__A_sub(
  __ASSUME__HIST : bool;
  time : real;
  Output : int
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (Output = (1 + (0 -> (pre Output))));

  __ASSERT = (__ASSUME__HIST => __GUARANTEE0);

  --%IVC __GUARANTEE0;

tel;

node _TOP__B_sub(
  __ASSUME__HIST : bool;
  Input : int;
  time : real;
  Output : int
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (Output = Input);

  __ASSERT = (__ASSUME__HIST => __GUARANTEE0);

  --%IVC __GUARANTEE0;

tel;

node _TOP__C_sub(
  __ASSUME__HIST : bool;
  Input : int;
  time : real;
  Output : int
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (Output = Input);

  __ASSERT = (__ASSUME__HIST => __GUARANTEE0);

  --%IVC __GUARANTEE0;

tel;

node _TOP__D_sub(
  __ASSUME__HIST : bool;
  Input1 : int;
  Input2 : int;
  time : real;
  Output : int
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (Output = (Input1 - Input2));

  __ASSERT = (__ASSUME__HIST => __GUARANTEE0);

  --%IVC __GUARANTEE0;

tel;

node main(
  A_sub__Output : int;
  A_sub____ASSUME__HIST : bool;
  B_sub__Output : int;
  B_sub____ASSUME__HIST : bool;
  C_sub__Output : int;
  C_sub____ASSUME__HIST : bool;
  D_sub__Output : int;
  D_sub____ASSUME__HIST : bool;
  x : int;
  A_sub__time : real;
  B_sub__Input : int;
  B_sub__time : real;
  C_sub__Input : int;
  C_sub__time : real;
  D_sub__Input1 : int;
  D_sub__Input2 : int;
  D_sub__time : real;
  time : real
) returns (

);
var
  __ASSUME__HIST : bool;
  __GUARANTEE0 : bool;
let
  --%MAIN;
  __ASSUME__HIST = (D_sub____ASSUME__HIST and (C_sub____ASSUME__HIST and (B_sub____ASSUME__HIST and (A_sub____ASSUME__HIST and true))));

  __GUARANTEE0 = (x = (-1));

  assert (time = A_sub__time);

  assert _TOP__A_sub(A_sub____ASSUME__HIST, A_sub__time, A_sub__Output);

  assert (A_sub____ASSUME__HIST = __HIST(true));

  assert (time = B_sub__time);

  assert _TOP__B_sub(B_sub____ASSUME__HIST, B_sub__Input, B_sub__time, B_sub__Output);

  assert (B_sub____ASSUME__HIST = __HIST(true));

  assert (time = C_sub__time);

  assert _TOP__C_sub(C_sub____ASSUME__HIST, C_sub__Input, C_sub__time, C_sub__Output);

  assert (C_sub____ASSUME__HIST = __HIST(true));

  assert (time = D_sub__time);

  assert _TOP__D_sub(D_sub____ASSUME__HIST, D_sub__Input1, D_sub__Input2, D_sub__time, D_sub__Output);

  assert (D_sub____ASSUME__HIST = __HIST(true));

  assert (A_sub__Output = B_sub__Input);

  assert (A_sub__Output = C_sub__Input);

  assert (B_sub__Output = D_sub__Input1);

  assert (C_sub__Output = D_sub__Input2);

  assert (D_sub__Output = x);

  assert true;

  assert (((time = 0.0) -> (time > (pre time))) and (true -> (time = ((pre time) + (time - (pre time))))));

  --%PROPERTY __ASSUME__HIST;
  --%PROPERTY __GUARANTEE0;

tel;

node __HIST(
  input : bool
) returns (
  hist : bool
);
let
  hist = (input -> ((pre hist) and input));

tel;

node __MinPos(
  a : real;
  b : real
) returns (
  ret : real
);
let
  ret = (if (a <= 0.0) then b else (if (b <= 0.0) then a else (if (a <= b) then a else b)));

tel;

node __Rise(
  input : bool
) returns (
  output : bool
);
let
  output = (input -> ((pre (not input)) and input));

tel;

node __Fall(
  input : bool
) returns (
  output : bool
);
let
  output = ((not input) -> ((pre input) and (not input)));

tel;

